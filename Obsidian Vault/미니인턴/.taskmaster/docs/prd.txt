# 미니인턴 M클래스 신청 시스템 PRD (Product Requirements Document)

## 1. 프로젝트 개요

### 프로젝트명
미니인턴 M클래스 신청 시스템 백엔드 API 서버

### 목적
Node.js + Express + TypeScript를 활용하여 온라인 클래스 신청 플랫폼의 백엔드 시스템을 구축한다. 
동시성 처리, 데이터 정합성 유지, 인증/인가 등 실무 수준의 기술적 요구사항을 만족해야 한다.

### 핵심 비즈니스 요구사항
- 사용자는 M클래스를 조회하고 신청할 수 있어야 한다
- 관리자는 M클래스를 생성, 삭제할 수 있어야 한다
- 동시에 많은 사용자가 신청해도 정원을 초과하지 않아야 한다
- 중복 신청과 마감 후 신청을 방지해야 한다

## 2. 기술적 요구사항

### 기술 스택
- Runtime: Node.js 18+
- Framework: Express.js
- Language: TypeScript
- Database: PostgreSQL 또는 MySQL
- Authentication: JWT
- Testing: Jest + Supertest
- ORM: Prisma 또는 TypeORM

### 성능 요구사항
- 100명 정원 클래스에 200명이 동시 신청 시 정확히 100명만 처리
- API 응답 시간 500ms 이내
- 테스트 커버리지 80% 이상

## 3. 기능 요구사항

### 3.1 사용자 관리 기능

#### 회원가입 (POST /api/users/signup)
- 이메일과 비밀번호로 회원가입
- 이메일 중복 검증
- 비밀번호 해싱 처리
- 입력값 유효성 검증

#### 로그인 (POST /api/users/login)
- 이메일/비밀번호 인증
- JWT 토큰 발급
- 로그인 실패 시 적절한 에러 메시지

#### 내 신청 내역 조회 (GET /api/users/applications)
- 인증된 사용자의 클래스 신청 내역 조회
- 신청 시간, 클래스 정보 포함

### 3.2 M클래스 관리 기능

#### M클래스 생성 (POST /api/mclasses)
- 관리자 권한 필요
- 제목, 설명, 최대 인원, 시작일시, 종료일시 입력
- 입력값 유효성 검증

#### M클래스 목록 조회 (GET /api/mclasses)
- 모든 사용자 접근 가능
- 페이지네이션 지원
- 현재 신청 인원 수 포함

#### M클래스 상세 조회 (GET /api/mclasses/:id)
- 클래스 상세 정보 조회
- 현재 신청 인원 및 신청 가능 여부 표시

#### M클래스 삭제 (DELETE /api/mclasses/:id)
- 관리자 권한 필요
- 신청자가 있는 클래스 삭제 시 적절한 처리

### 3.3 M클래스 신청 기능

#### M클래스 신청 (POST /api/mclasses/:id/apply)
- 인증된 사용자만 접근 가능
- 신청 조건 검증:
  - 중복 신청 불가 (UNIQUE 제약조건)
  - 마감 시간 이후 신청 불가
  - 최대 인원 초과 시 신청 거절
- 동시성 처리로 정원 정확성 보장
- 신청 성공 시 DB에 기록 저장

## 4. 데이터베이스 설계

### 테이블 구조

#### users 테이블
- id (PK, UUID)
- email (UNIQUE, NOT NULL)
- password (NOT NULL, 해싱된 값)
- isAdmin (BOOLEAN, DEFAULT false)
- createdAt (TIMESTAMP)
- updatedAt (TIMESTAMP)

#### classes 테이블
- id (PK, UUID)
- title (NOT NULL)
- description (TEXT)
- maxParticipants (INTEGER, NOT NULL)
- startAt (TIMESTAMP, NOT NULL)
- endAt (TIMESTAMP, NOT NULL)
- hostId (FK to users.id)
- createdAt (TIMESTAMP)
- updatedAt (TIMESTAMP)

#### applications 테이블
- id (PK, UUID)
- userId (FK to users.id)
- classId (FK to classes.id)
- createdAt (TIMESTAMP)
- UNIQUE(userId, classId) - 중복 신청 방지

### 제약조건
- 중복 신청 방지: UNIQUE(userId, classId)
- 정원 초과 방지: 애플리케이션 레벨에서 트랜잭션으로 처리
- 외래키 제약조건 설정

## 5. 보안 요구사항

### 인증/인가
- JWT 기반 토큰 인증
- 비밀번호 bcrypt 해싱
- 관리자 권한 검증 미들웨어

### 입력값 검증
- SQL Injection 방지
- XSS 공격 방지
- 입력값 타입 및 형식 검증

### 에러 처리
- 민감한 정보 노출 방지
- 일관된 에러 응답 형식
- 적절한 HTTP 상태 코드 사용

## 6. 동시성 처리 요구사항

### 핵심 시나리오
- 최대 100명 정원 클래스에 200명이 동시 신청
- 정확히 100명만 신청 성공해야 함
- 101번째부터는 "정원 초과" 에러 반환

### 구현 전략
- 데이터베이스 트랜잭션 활용
- 비관적 락 또는 낙관적 락 사용
- 원자적 연산으로 정원 검증 및 신청 처리

## 7. 테스트 요구사항

### 단위 테스트
- 각 함수별 개별 테스트
- 비즈니스 로직 검증
- 에러 케이스 테스트

### 통합 테스트
- API 엔드포인트별 테스트
- 인증/인가 흐름 테스트
- 데이터베이스 연동 테스트

### 동시성 테스트
- 다중 사용자 동시 신청 시나리오
- 정원 초과 방지 검증
- 데이터 정합성 확인

### 성능 테스트
- 응답 시간 측정
- 부하 테스트
- 메모리 사용량 모니터링

## 8. API 명세

### 응답 형식
```json
{
  "success": true,
  "data": {},
  "message": "Success message",
  "timestamp": "2024-01-01T00:00:00Z"
}
```

### 에러 응답 형식
```json
{
  "success": false,
  "error": {
    "code": "ERROR_CODE",
    "message": "Error description"
  },
  "timestamp": "2024-01-01T00:00:00Z"
}
```

## 9. 배포 및 운영

### 환경 설정
- 개발, 테스트, 프로덕션 환경 분리
- 환경변수 관리 (.env)
- 데이터베이스 마이그레이션

### 모니터링
- 애플리케이션 로그 수집
- 성능 메트릭 모니터링
- 에러 알림 시스템

### Docker 설정 (선택사항)
- Dockerfile 작성
- docker-compose 설정
- 컨테이너 기반 배포

## 10. 문서화 요구사항

### README.md
- 프로젝트 개요 및 실행 방법
- API 명세서 (표 형식)
- ERD 다이어그램
- 설치 및 설정 가이드

### API 문서
- 각 엔드포인트별 상세 설명
- 요청/응답 예시
- 에러 코드 정의

### 아키텍처 문서
- 시스템 구조도
- 데이터 흐름도
- 설계 의도 및 기술적 결정사항

## 11. 성공 지표

### 기능적 요구사항
- 모든 필수 API 정상 작동
- 동시성 처리 정확성 100%
- 테스트 커버리지 80% 이상

### 비기능적 요구사항
- API 응답 시간 500ms 이하
- 동시 사용자 200명 처리 가능
- 메모리 사용량 최적화

### 코드 품질
- TypeScript 타입 안정성
- 일관된 코딩 컨벤션
- 적절한 에러 처리

## 12. 제약사항

### 기술적 제약사항
- Node.js 18+ 사용 필수
- Express.js 프레임워크 사용
- TypeScript 적용 필수
- 단일 서버 구성

### 시간적 제약사항
- 총 개발 기간 6일
- 일일 6-8시간 작업
- 단계별 마일스톤 준수

### 리소스 제약사항
- 개인 프로젝트 수준
- 외부 의존성 최소화
- 무료 도구 우선 사용